//package ru.yandex.practicum.filmorate.storage.dao.film.review;
//
//import lombok.AllArgsConstructor;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.jdbc.core.JdbcTemplate;
//import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
//import org.springframework.stereotype.Component;
//import ru.yandex.practicum.filmorate.exception.ReviewsUsefulValidationException;
//import ru.yandex.practicum.filmorate.model.Review;
//import ru.yandex.practicum.filmorate.storage.dao.film.FilmStorage;
//import ru.yandex.practicum.filmorate.storage.dao.user.UserStorage;
//
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//
//@Component
//@AllArgsConstructor
//@Slf4j
//public class ReviewDao implements ReviewStorage {
//    private final JdbcTemplate jdbcTemplate;
//    private final FilmStorage filmStorage;
//    private final UserStorage userStorage;
//
//
//    @Override
//    public Review createNewReview(Review review) {
//        log.info("Получен запрос на создание нового отзыва");
//
//        filmStorage.getFilmById(review.getFilmId());
//        userStorage.getUserById(review.getUserId());
//
//        checkReviewsUseful(review.getUseful());
//
//        SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(jdbcTemplate)
//                .withTableName("reviews")
//                .usingGeneratedKeyColumns("review_id");
//
//        Map<String, Object> parameters = new HashMap<>();
//        parameters.put("name", film.getName());
//        parameters.put("description", film.getDescription());
//        parameters.put("release_date", film.getReleaseDate());
//        parameters.put("duration", film.getDuration());
//        parameters.put("rating_id", film.getMpa().getId());
//
//        Number generatedId = jdbcInsert.executeAndReturnKey(parameters);
//
//        CREATE TABLE reviews
//                (
////                        review_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
////                        film_id     INTEGER NOT NULL REFERENCES films (film_id) ON DELETE CASCADE,
////                        user_id     INTEGER NOT NULL REFERENCES users (user_id) ON DELETE CASCADE,
////                        is_positive BOOLEAN NOT NULL,
////                        content     TEXT    NOT NULL CHECK (content <> ''),
////                useful      INTEGER NOT NULL CHECK (useful >= 1 AND useful <= 100)
////);
//
//    }
//
//    @Override
//    public Review updateReview(Review review) {
//
//    }
//
//    @Override
//    public void deleteReviewById(int id) {
//
//    }
//
//    @Override
//    public Review getReviewById(int id) {
//        return null;
//    }
//
//    @Override
//    public List<Review> getFilmsReviews(int id, int count) {
//        return null;
//    }
//
//    @Override
//    public void addLikeToReview(int reviewId, int userId) {
//
//    }
//
//    @Override
//    public void addDislikeToReview(int reviewId, int userId) {
//
//    }
//
//    @Override
//    public void deleteLikeFromReview(int reviewId, int userId) {
//
//    }
//
//    @Override
//    public void deleteDislikeFromReview(int reviewId, int userId) {
//
//    }
//
//    private void checkReviewsUseful(int useful) {
//        if (useful < 1 || useful >= 101) {
//            throw new ReviewsUsefulValidationException("Полезность должна быть в диапозоне [1; 100]");
//        }
//    }
//}
